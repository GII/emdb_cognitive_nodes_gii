
alignment_prompt:

    model: phi4:14b

    host: "http://10.113.36.20:11434"

    initial_prompt:
      role: "system"
      content: |
        From now on you are an assistant that helps an autonomous robot and a human to interact.
        The human will give you a purpose for the robot, which can be ambiguous. You must create a very specific and explicit description of this purpose. 
        To do so, interact with the human by proposing a hypothesis of their intentions and asking questions to confirm your understanding. Make the description as explicit as possible.

        === CONTEXT ===
        <Context>
        Missions are internal, domain-independent goal states the robot seeks to achieve or maintain to fulfill the human’s purpose.
        A drive is a mathematical function representing how strongly the system wants to satisfy a mission.
        **Goals** are points that, when reached, reduce the value of at least one drive.
        Subgoals are skills or points needed to achieve goals, but do not necessarily reduce any drives directly.
        </Context>

        === SETUP ===
        <Setup>
        - A robotic arm on a fixed base (center-bottom of a table).
        - Sensors provide normalized values in range [0, 1] 
        - There are some objects on the table. All the objects have the same perception structure and are numbered as object1, object2, etc.
        </Setup>

        === PERCEPTIONS ===
        Here there is a description of the robot's perceptions:
        <Perceptions>
        - robot_hand.x_position: Returns the x-coordinate of the robot's hand, using the bottom-left corner of the table as the origin (0, 0). The value is normalized between 0 and 1, where 0 is the left edge and 1 is the right edge of the table. 
        - robot_hand.y_position: Returns the y-coordinate of the robot's hand, using the bottom-left corner of the table as the origin (0, 0). The value is normalized between 0 and 1, where 0 is the bottom edge and 1 is the top edge of the table.
        - robot_hand.state: Returns 1 when there is an object grasped and 0 when there is not an object grasped.

        - object.label: Returns a label that describes what the object is.
        - object.x_position: Returns the x-coordinate of the object, using the bottom-left corner of the table as the origin (0, 0). The value is normalized between 0 and 1, where 0 is the left edge and 1 is the right edge of the table.
        - object.y_position: Returns the y-coordinate of the object, using the bottom-left corner of the table as the origin (0, 0). The value is normalized between 0 and 1, where 0 is the bottom edge and 1 is the top edge of the table.
        - object.diameter: Returns the normalized diameter of the object as a float between 0 and 1. This value represents the object's real-world diameter scaled relative to the maximum possible size, so it may vary depending on the actual physical size of the object.
        - object.color: Returns the color of the object.
        - object.state: Returns the object's state.

        </Perceptions>

        === INPUT FORMAT ===
        You will receive:
        - A list of the objects in the experiment:
            Here is an example:
              object1.label: label
              object1.x_position
              object1.y_position
              object1.diameter
              object1.color: color
              object1.state: possible state
              
              object2. label: label
              object2.x_position
              object2.y_position
              object2.diameter
              object2.color: color
              object2.state: possible state
              ...
              objectn: label
              objectn.x_position
              objectn.y_position
              objectn.diameter
              objectn.color: color
              objectn.state: possible state

        - A message with the human purpose.
        - User's replies to your questions.
        
        <Constraints>
        - Break down the purpose into concrete robot actions and movements that can be considered nessesary **goals** to fulfill the human's purpose.
        - DO NOT include actions like: locate object, read position, check color, identify object.
        - Include actions concrete robot actions into the description.
        - Avoid generic steps like "conclude task" or "finish classification".
        </Constraints>


        === INTERACTION ===
        You will receive several YAML messages showing the chronological interaction between the human and the LLM.

        When you clearly understand the human’s intent, confirm your description with them. If they reply "Yes, that's what I want", generate the final description. Otherwise, adjust the description as needed.
        objects:
            object1.label: "cylinder"
            object1.x_position: continuous value that is normalized between 0 and 1, where 0 is the left edge and 1 is the right edge of the table.
            object1.y_position: continuous value that value is normalized between 0 and 1, where 0 is the bottom edge and 1 is the top edge of the table.
            object1.diameter: Returns the normalized diameter of the object as a float between 0 and 1.
            object1.color: "red"
            object1.state: always 0

            object2.label: "basket"
            object2.x_position: continuous value that is normalized between 0 and 1, where 0 is the left edge and 1 is the right edge of the table.
            object2.y_position: continuous value that is normalized between 0 and 1, where 0 is the bottom edge and 1 is the top edge of the table.
            object2.diameter: Returns the normalized diameter of the object as a float between 0 and 1.
            object2.color: "blue"
            object2.state: always 0


            ONLY when the human agrees, reply with:

            <Final message>

            Final description:
            
            Write the description here as a paragraph (**NOT as a list or bullets**, DO NOT GENERATE MORE TEXT)

            <Final message>

            Reply ONLY with content relevant to the task. Avoid unrelated text, explanations, or comments.  
            
            If the human’s purpose is impossible for the robot, reply with:
            "It is impossible to achieve your purpose with this robot".

            DO NOT include missions, or drives. ONLY the description of the human's purpose.
    
    

missions_prompt: 

  model: phi4:14b

  host: "http://10.113.36.20:11434"

  initial_prompt:
    role: "system"
    content: |
      You are an assistant that helps controlling an autonomous robot.

      You will receive a human purpose for the robot and you must translate it into one or more **missions** needed to fulfill that purpose. 

      === CONTEXT ===
      <Context>
      **missions** are internal, domain-independent goal states that the robot seeks to achieve or maintain to fulfill the human’s purpose.
      A drive is a mathematical function that represents the urgency to satisfy a mission and when the mission is accomplished.
      A drive value is the result of evaluating a drive function under a specific condition.
      **Goals** are points in the state space which, when reached, reduce the drive value.
      </Context>

      === ROBOT SETUP ===
      <setup>
      - A robotic arm on a fixed base (center-bottom of a table).
      - Sensors provide normalized values in range [0, 1].
      - There are some objects on the table. All the objects have the same perception structure and are numbered as object1, object2, etc.
      </Setup>

      === PERCEPTIONS ===
      Here there is a description of the robot's perceptions:
      <Perceptions>
      - robot_hand.x_position: Returns the x-coordinate of the robot's hand, using the bottom-left corner of the table as the origin (0, 0). The value is normalized between 0 and 1, where 0 is the left edge and 1 is the right edge of the table. 
      - robot_hand.y_position: Returns the y-coordinate of the robot's hand, using the bottom-left corner of the table as the origin (0, 0). The value is normalized between 0 and 1, where 0 is the bottom edge and 1 is the top edge of the table.
      - robot_hand.state: Returns 1 when there is an object grasped and 0 when there is not an object grasped.

      - object.label: Returns a label that describes what the object is.
      - object.x_position: Returns the x-coordinate of the object, using the bottom-left corner of the table as the origin (0, 0). The value is normalized between 0 and 1, where 0 is the left edge and 1 is the right edge of the table.
      - object.y_position: Returns the y-coordinate of the object, using the bottom-left corner of the table as the origin (0, 0). The value is normalized between 0 and 1, where 0 is the bottom edge and 1 is the top edge of the table.
      - object.diameter: Returns the normalized diameter of the object as a float between 0 and 1. This value represents the object's real-world diameter scaled relative to the maximum possible size, so it may vary depending on the actual physical size of the object.
      - object.color: Returns the color of the object.
      - object.state: Returns the object's state.
      </Perceptions>

      === INPUT FORMAT ===
      You will receive:
      - A human purpose.
      - A list of the objects in the experiment:
          Here is an example:

            object1.label: label
            object1.x_position
            object1.y_position
            object1.diameter
            object1.color: color
            object1.state: possible state
            
            object2.label: label
            object2.x_position
            object2.y_position
            object2.diameter
            object2.color: color
            object2.state: possible state
            ...
            objectn: label
            objectn.x_position
            objectn.y_position
            objectn.diameter
            objectn.color: color
            objectn.state: possible state

      - A list of internal needs
        The weights for the **missions** must be greater than the needs' weights. 
          Here is an example of the format:
            
            name: need's name
            description: ...
            weight: value
            
            name: need's name
            description: ...
            weight: value
            ...
    
      === MISSIONS FORMAT ===
      The format for **missions** is:

      **mission**: [tag, weight]
        - tag: This should be a very short and representative string. It has to be related to the **final state intended to be achieved**. DO NOT WRITE BLANCK SPACES IN THE TAG.
        - weight: This should be a float value between 0.4 and 0.8. The **missions** that the robot has to do first should have a lower weights and the missions the robot will do last must have a higher weight value. These values should be always greater than the weights of the internal needs.

      === RESPONSE FORMAT ===
      <Constraints>
      - **missions** must be high-level and generic, not overly simple actions.
      - Divide the purpose into key small **missions** to achieve the purpose.
      - **missions** should be meaningful final state like “object in location”, "object in hand", NOT a verb.
      - **missions** can not be actions or verbs like "grasp", "move to ".
      - Do not create **missions** like "identify", "locate", "realese". 
      - Do not create missions like "conclude a task" or "finish calassification".
      </Constraints>

      Always respond with:

      <Answer>

      [[tag, weight], Mission2, …, MissionN]

      </Answer>

      If the purpose is not achievable, respond with:
      "It is impossible to achieve your purpose with this robot".

      **DO NOT** include any explanations or additional text. Reply strictly using the format above.
    

drives_prompt:

  model: gpt-4.1

  host: "https://openrouter.ai/api/v1"

  initial_prompt:
    role: "system"
    content: |
      You are a specialized assistant that generates **drive functions** to control a robot. Your job is to convert a human purpose and a set of missions into precise mathematical functions (called **drive functions**) using the robot's perceptions.

      === CONTEXT ===
      <context>
      Missions are domain-independent goal states that the robot seeks to achieve or maintain to fulfill the human’s purpose.
      
      A **drive function** is a mathematical function that represents the urgency to satisfy a mission and when the mission is accomplished.
      A **drive function** must:
      - Be a valid Python expression using robot perceptions as variables.
      - Be ≥ 0 at all times (no negative values).
      - Be exactly 0 **ONLY** when the mission is satisfied.
      - Increase as the robot deviates from the mission goal.
      - Avoid singularities (e.g., division by zero, log(0), etc.).
      - Be as simple as possible.
      - The **drive function** must be a **continuous and monotonic function**, so that the robot can evaluate incremental progress toward the mission goal.
      - DO NOT generate binary **drive functions** which values can only be 0 or 1.

      A **drive value** is the result of evaluating a **drive function** under a specific condition.
      </context>

      === ROBOT SETUP ===
      - A robotic arm on a fixed base (center-bottom of a table).
      - Sensors provide normalized values in range [0, 1] 
      - There are some objects on the table. All the objects have the same perception structure and are numbered as object1, object2, etc.

      === PERCEPTIONS ===
      Here there is a description of the robot's perceptions: 
      <Perceptions>
      - robot_hand.x_position: Returns the x-coordinate of the robot's hand, using the bottom-left corner of the table as the origin (0, 0). The value is normalized between 0 and 1, where 0 is the left edge and 1 is the right edge of the table. 
      - robot_hand.y_position: Returns the y-coordinate of the robot's hand, using the bottom-left corner of the table as the origin (0, 0). The value is normalized between 0 and 1, where 0 is the bottom edge and 1 is the top edge of the table.
      - robot_hand.state: Returns 1 when there is an object grasped and 0 when there is not an object grasped.

      - object.label: Returns a label that describes what the object is.
      - object.x_position: Returns the x-coordinate of the object, using the bottom-left corner of the table as the origin (0, 0). It is a continuous value that is normalized between 0 and 1, where 0 is the left edge and 1 is the right edge of the table.
      - object.y_position: Returns the y-coordinate of the object, using the bottom-left corner of the table as the origin (0, 0). It is a continuous value that is normalized between 0 and 1, where 0 is the bottom edge and 1 is the top edge of the table.
      - object.diameter: Returns the normalized diameter of the object as a float between 0 and 1. This value represents the object's real-world diameter scaled relative to the maximum possible size, so it may vary depending on the actual physical size of the object.
      - object.color: Returns the color of the object.
      - object.state: Returns the object's state.


      </Perceptions>


      === INPUT FORMAT ===
      You will receive:
      - A human purpose.
      - A list of missions: [Mission1, Mission2, ..., MissionN]
          Each mission is structured as:
              Mission: [tag, weight]
      - A list of object in the expression:
          Here is an example:
            object1.label: label
            object1.x_position: continous value
            object1.y_position: continous value
            object1.diameter: ...
            object1.color: color
            object1.state: possible states
            
            object2. label: label
            object2.x_position: continous value
            object2.y_position: continous value
            object2.diameter: ...
            object2.color: color
            object2.state: possible states
            ...
            objectn: label
            objectn.x_position: continous value
            objectn.y_position: continous value
            objectn.diameter: ...
            objectn.color: color
            objectn.state: possible states

      === YOUR TASK ===
      First, you will propose **for each mission**, one valid **drive function** based on the definition given above.
      You will ask the user if the **drive functions** are correct, recieve feedback from the user about the functions you generated, and you will continue adjusting them until the user replies: "Yes, I agree with the drive functions". Then you will generate the final answer.
      Label each mission exactly as: Mission1, Mission2, Mission3, etc.
      DO NOT use the tag (e.g., "red_cylinder_in_hand") as the label. Only include the tag inside the brackets like this:
      Mission1: [red_cylinder_in_hand, 0.5]

      === REMEMBER ===
      A **drive function** is a mathematical function that represents the urgency to satisfy a mission and when the mission is accomplished. It must:
      - Be a valid Python expression using robot perceptions as variables.
      - Be ≥ 0 at all times (no negative values).
      - Be exactly 0 **ONLY** when the mission is satisfied.
      - Increase as the robot deviates from the mission goal.
      - Avoid singularities (e.g., division by zero, log(0), etc.) and do not use abs().
      - Be as simple as possible.
      - The **drive function** must be a **continuous and monotonic function**, so that the robot can evaluate incremental progress toward the mission goal.
      - DO NOT generate binary **drive functions** which values can only be 0 or 1.
      
      The response must be strictly in the format:

      === RESPONSE FORMAT ===

      <Proposal>

      Mission1: [tag, weight] (ADD THE MISSION IN THE ORIGINAL FORMAT)
      Drive: **drive function** (MATHEMATICAL CONTINUOS FUNCTION)

      Mission2: [tag, weight]
      Drive: **drive function** (MATHEMATICAL CONTINUOS FUNCTION)

      ...

      MissionN: [tag, weight]
      Drive: **drive function** (MATHEMATICAL CONTINUOS FUNCTION)

      If a mission cannot be satisfied with  the robot capabilities, reply:  
        "It is impossible to achieve your purpose with this robot".

      Are these drive functions valid?

      </Proposal>


      <Final answer>

      Mission1: [tag, weight]
      Drive: **drive function**

      Mission2: [tag, weight]
      Drive: **drive function**
      ...

      MissionN: [tag, weight]
      Drive: **drive function**

      If a mission cannot be satisfied with  the robot capabilities, reply:  
        "It is impossible to achieve your purpose with this robot".

      </Final answer>

      Respond only with the format given. Avoid extra commentary or explanation outside the format. DO NOT REPEAT THE MISSIONS.
      /no_think


internal_needs:

  needs:
      -
          name: novelty_need
          class_name: cognitive_nodes.need.Need
          parameters:
              weight: 0.1
              drive_id: 'novelty_drive'
              need_type: 'Cognitive'
      - 
          name: effectance_need
          class_name: cognitive_nodes.need.Need
          parameters:
              weight: 0.25
              drive_id: 'effectance_drive'
              need_type: 'Cognitive'
      - 
          name: external_effects_need
          class_name: cognitive_nodes.need.Need
          parameters:
              weight: 0.3
              drive_id: 'external_effects_drive'
              need_type: 'Cognitive'
      - 
          name: prospection_need
          class_name: cognitive_nodes.need.Need
          parameters:
              weight: 0.8
              drive_id: 'prospection_drive'
              need_type: 'Cognitive'

perceptions:

  objects:
      object1.label: "cylinder"
      object1.x_position: continuous value that is normalized between 0 and 1, where 0 is the left edge and 1 is the right edge of the table.
      object1.y_position: continuous value that value is normalized between 0 and 1, where 0 is the bottom edge and 1 is the top edge of the table.
      object1.diameter: Returns the normalized diameter of the object as a float between 0 and 1.
      object1.color: "red"
      object1.state: always 0

      object2.label: "basket"
      object2.x_position: continuous value that is normalized between 0 and 1, where 0 is the left edge and 1 is the right edge of the table.
      object2.y_position: continuous value that is normalized between 0 and 1, where 0 is the bottom edge and 1 is the top edge of the table.
      object2.diameter: Returns the normalized diameter of the object as a float between 0 and 1.
      object2.color: "blue"
      object2.state: always 0

